{
  "version": 3,
  "sources": ["../../index.ts"],
  "sourcesContent": ["import { APIGatewayProxyHandler } from 'aws-lambda';\r\n\r\nconst namesList = [\r\n    'David Smith \u5927\u536B \u65AF\u5BC6\u65AF',\r\n    'Yueling Zhang \u6708\u6797\u5F20',\r\n    'Huawen Wu \u534E\u6587\u5434',\r\n    'Annie Lee \u674E\u5B89\u59AE',\r\n    'vineeth'\r\n];\r\n\r\nexport const handler: APIGatewayProxyHandler = async (event) => {\r\n    const inputName = event.queryStringParameters?.name || '';\r\n\r\n    if (!inputName.trim()) {\r\n        return {\r\n            statusCode: 400,\r\n            body: JSON.stringify({\r\n                message: 'Input name cannot be empty or null',\r\n            }),\r\n        };\r\n    }\r\n\r\n    const bestMatch = findBestMatch(inputName, namesList);\r\n\r\n    if (!bestMatch) {\r\n        return {\r\n            statusCode: 404,\r\n            body: JSON.stringify({\r\n                message: 'Match not found',\r\n            }),\r\n        };\r\n    }\r\n\r\n    return {\r\n        statusCode: 200,\r\n        body: JSON.stringify({\r\n            message: 'Ready to match',\r\n            input: inputName,\r\n            match: bestMatch\r\n        }),\r\n    };\r\n};\r\n\r\nfunction findBestMatch(input: string, names: string[]): string | null {\r\n    const inputParts = input.trim().toLowerCase().split(/\\s+/).sort();\r\n    let bestMatch: string | null = null;\r\n    let bestMatchScore = -1;\r\n\r\n    for (const name of names) {\r\n        const nameParts = name.trim().toLowerCase().split(/\\s+/).sort();\r\n        \r\n        // Check if all input parts match at least one name part\r\n        if (inputParts.every(part => nameParts.some(namePart => namePart.includes(part)))) {\r\n            return name; // Return the first matching name\r\n        }\r\n    }\r\n\r\n    return null; // Return null if no match found\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,IAAM,YAAY;AAAA,EACd;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAEO,IAAM,UAAkC,OAAO,UAAU;AAC5D,QAAM,YAAY,MAAM,uBAAuB,QAAQ;AAEvD,MAAI,CAAC,UAAU,KAAK,GAAG;AACnB,WAAO;AAAA,MACH,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACjB,SAAS;AAAA,MACb,CAAC;AAAA,IACL;AAAA,EACJ;AAEA,QAAM,YAAY,cAAc,WAAW,SAAS;AAEpD,MAAI,CAAC,WAAW;AACZ,WAAO;AAAA,MACH,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACjB,SAAS;AAAA,MACb,CAAC;AAAA,IACL;AAAA,EACJ;AAEA,SAAO;AAAA,IACH,YAAY;AAAA,IACZ,MAAM,KAAK,UAAU;AAAA,MACjB,SAAS;AAAA,MACT,OAAO;AAAA,MACP,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;AAEA,SAAS,cAAc,OAAe,OAAgC;AAClE,QAAM,aAAa,MAAM,KAAK,EAAE,YAAY,EAAE,MAAM,KAAK,EAAE,KAAK;AAChE,MAAI,YAA2B;AAC/B,MAAI,iBAAiB;AAErB,aAAW,QAAQ,OAAO;AACtB,UAAM,YAAY,KAAK,KAAK,EAAE,YAAY,EAAE,MAAM,KAAK,EAAE,KAAK;AAG9D,QAAI,WAAW,MAAM,UAAQ,UAAU,KAAK,cAAY,SAAS,SAAS,IAAI,CAAC,CAAC,GAAG;AAC/E,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,SAAO;AACX;",
  "names": []
}
